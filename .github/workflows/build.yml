name: ZMK build + DTS dump

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: read

jobs:
  # 通常のZMKビルド
  build:
    uses: zmkfirmware/zmk/.github/workflows/build-user-config.yml@main

  introspect-left:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # 0) コンテナで実行するシェルを、まずホストのワークスペース上に作成
      - name: Prepare left introspection script (host)
        run: |
          mkdir -p ws
          cat > ws/ci-left.sh <<'BASH'
          set -euxo pipefail

          # 0) 簡易 manifest（無ければ作成）
          if [ ! -f /work/config/west.yml ]; then
            mkdir -p /work/config
            cat > /work/config/west.yml <<'EOF'
          manifest:
            remotes:
              - name: zmkfirmware
                url-base: https://github.com/zmkfirmware
            projects:
              - name: zmk
                remote: zmkfirmware
                revision: main
                import: app/west.yml
            self:
              path: config
          EOF
          fi

          # 0.5) Git の安全ディレクトリ（CI対策）
          git config --global --add safe.directory '*'

          echo "::group::west init/update"
          mkdir -p /work/ws
          cd /work/ws
          west init -l /work/config
          cd "$(west topdir)"
          west update
          west zephyr-export
          echo "::endgroup::"

          echo "::group::west build (left)"
          # ★ 必要なモジュールのみを指定（循環回避）
          EXTRA_MODS="/work/zmk-rgbled-widget"
          west build -s /work/zmk/app -b seeeduino_xiao_ble -d /work/ws/build-left -- \
            -DSHIELD=tsumkey_l \
            -DBOARD_ROOT=/work \
            -DZMK_CONFIG=/work/config \
            -DZMK_EXTRA_MODULES="${EXTRA_MODS}" || true
          echo "::endgroup::"

          echo "::group::tree(build-left)"
          ls -la /work/ws/build-left || true
          ls -la /work/ws/build-left/zephyr || true
          echo "::endgroup::"

          if [ -f /work/ws/build-left/zephyr/zephyr.dts ]; then
            echo "=== /chosen (LEFT) ==="
            sed -n '/chosen {/,/};/p' /work/ws/build-left/zephyr/zephyr.dts || true

            echo "=== KSCAN (LEFT) ==="
            awk '/label = "KSCAN"/{f=1} f{print} /};/{if(f){exit}}' /work/ws/build-left/zephyr/zephyr.dts \
              || { echo "(fallback)"; grep -n 'label = "KSCAN"' -n -A40 -B5 /work/ws/build-left/zephyr/zephyr.dts || true; }
          else
            echo "::error::zephyr.dts not found. Dumping logs..."
            find /work/ws/build-left -maxdepth 3 -type f \( -name "CMakeOutput.log" -o -name "CMakeError.log" -o -name "*.log" \) -print -exec tail -n +1 {} \; || true
            exit 1
          fi
          BASH
          chmod +x ws/ci-left.sh

      # 1) さきほど作ったスクリプトを、コンテナ内で実行
      - name: Dump left DTS (/chosen & KSCAN)
        run: |
          docker run --rm -v "$PWD":/work -w /work zmkfirmware/zmk-build-arm:stable bash -lc '/work/ws/ci-left.sh'

      # 2) ホスト側で存在確認→アーティファクト化
      - name: Verify DTS files exist (left, host side)
        run: |
          ls -la "${{ github.workspace }}/ws/build-left/zephyr"
          test -f "${{ github.workspace }}/ws/build-left/zephyr/zephyr.dts"

      - name: Upload DTS artifacts (left)
        uses: actions/upload-artifact@v4
        with:
          name: dts-left
          path: |
            ${{ github.workspace }}/ws/build-left/zephyr/zephyr.dts
            ${{ github.workspace }}/ws/build-left/zephyr/zephyr.dts.pre
            ${{ github.workspace }}/ws/build-left/zephyr/include/generated/devicetree_generated.h
          if-no-files-found: error

  introspect-right:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # 0) コンテナで実行するシェルを、まずホストのワークスペース上に作成
      - name: Prepare right introspection script (host)
        run: |
          mkdir -p ws
          cat > ws/ci-right.sh <<'BASH'
          set -euxo pipefail

          # 0) 簡易 manifest（無ければ作成）
          if [ ! -f /work/config/west.yml ]; then
            mkdir -p /work/config
            cat > /work/config/west.yml <<'EOF'
          manifest:
            remotes:
              - name: zmkfirmware
                url-base: https://github.com/zmkfirmware
            projects:
              - name: zmk
                remote: zmkfirmware
                revision: main
                import: app/west.yml
            self:
              path: config
          EOF
          fi

          # 0.5) Git の安全ディレクトリ（CI対策）
          git config --global --add safe.directory '*'

          echo "::group::west init/update"
          mkdir -p /work/ws
          cd /work/ws
          west init -l /work/config
          cd "$(west topdir)"
          west update
          west zephyr-export
          echo "::endgroup::"

          echo "::group::west build (right)"
          # ★ 必要なモジュールのみを指定（循環回避）
          EXTRA_MODS="/work/zmk-rgbled-widget"
          west build -s /work/zmk/app -b seeeduino_xiao_ble -d /work/ws/build-right -- \
            -DSHIELD=tsumkey_r \
            -DBOARD_ROOT=/work \
            -DZMK_CONFIG=/work/config \
            -DZMK_EXTRA_MODULES="${EXTRA_MODS}" || true
          echo "::endgroup::"

          echo "::group::tree(build-right)"
          ls -la /work/ws/build-right || true
          ls -la /work/ws/build-right/zephyr || true
          echo "::endgroup::"

          if [ -f /work/ws/build-right/zephyr/zephyr.dts ]; then
            echo "=== /chosen (RIGHT) ==="
            sed -n '/chosen {/,/};/p' /work/ws/build-right/zephyr/zephyr.dts || true

            echo "=== KSCAN (RIGHT) ==="
            awk '/label = "KSCAN"/{f=1} f{print} /};/{if(f){exit}}' /work/ws/build-right/zephyr/zephyr.dts \
              || { echo "(fallback)"; grep -n 'label = "KSCAN"' -n -A40 -B5 /work/ws/build-right/zephyr/zephyr.dts || true; }
          else
            echo "::error::zephyr.dts not found. Dumping logs..."
            find /work/ws/build-right -maxdepth 3 -type f \( -name "CMakeOutput.log" -o -name "CMakeError.log" -o -name "*.log" \) -print -exec tail -n +1 {} \; || true
            exit 1
          fi
          BASH
          chmod +x ws/ci-right.sh

      # 1) さきほど作ったスクリプトを、コンテナ内で実行
      - name: Dump right DTS (/chosen & KSCAN)
        run: |
          docker run --rm -v "$PWD":/work -w /work zmkfirmware/zmk-build-arm:stable bash -lc '/work/ws/ci-right.sh'

      # 2) ホスト側で存在確認→アーティファクト化
      - name: Verify DTS files exist (right, host side)
        run: |
          ls -la "${{ github.workspace }}/ws/build-right/zephyr"
          test -f "${{ github.workspace }}/ws/build-right/zephyr/zephyr.dts"

      - name: Upload DTS artifacts (right)
        uses: actions/upload-artifact@v4
        with:
          name: dts-right
          path: |
            ${{ github.workspace }}/ws/build-right/zephyr/zephyr.dts
            ${{ github.workspace }}/ws/build-right/zephyr/zephyr.dts.pre
            ${{ github.workspace }}/ws/build-right/zephyr/include/generated/devicetree_generated.h
          if-no-files-found: error
